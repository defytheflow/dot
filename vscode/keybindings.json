[
  /**
   ** Switch focus between editor and panel with `ctrl+'` (no default bindings).
   */

  {
    "describe": "Focus panel",
    "key": "ctrl+'",
    "command": "workbench.action.focusPanel",
    "when": "!panelFocus"
  },

  {
    "describe": "Focus editor",
    "key": "ctrl+'",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "panelFocus"
  },

  /**
   ** Cycle through search results with `ctrl+n` and `ctrl+p` (default bindings use `f4` and `shift+f4`).
   */

  {
    "key": "ctrl+n",
    "command": "search.action.focusNextSearchResult",
    "when": "!suggestWidgetVisible && (hasSearchResult || inSearchEditor)"
  },

  {
    "key": "ctrl+p",
    "command": "search.action.focusPreviousSearchResult",
    "when": "!suggestWidgetVisible && (hasSearchResult || inSearchEditor)"
  },

  /**
   ** Cycle through autocomplete options with `ctrl+n` and `ctrl+p` (default bindings use arrow keys).
   */

  {
    "key": "ctrl+n",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },

  {
    "key": "ctrl+p",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },

  /**
   ** Cycle through panel views with `cmd+[` and `cmd+]` (no default bindings).
   */

  {
    "describe": "Previous panel view",
    "key": "cmd+[",
    "command": "workbench.action.previousPanelView",
    "when": "!editorFocus"
  },

  {
    "describe": "Next panel view",
    "key": "cmd+]",
    "command": "workbench.action.nextPanelView",
    "when": "!editorFocus"
  },

  /**
   ** Overwrite vscode `isDevelopment` mode.
   */

  // {
  //   "describe": "Reload window",
  //   "key": "cmd+r",
  //   "command": "workbench.action.reloadWindow"
  // },

  {
    "describe": "Toggle developer tools",
    "key": "cmd+alt+i",
    "command": "workbench.action.toggleDevTools"
  },

  /**
   ** Toggle panel position between bottom and right with `cmd+shift+d` like in web browsers.
   */

  {
    "key": "shift+cmd+d",
    "command": "workbench.action.positionPanelBottom",
    "when": "panelVisible && panelPosition == 'right'"
  },

  {
    "key": "shift+cmd+d",
    "command": "workbench.action.positionPanelRight",
    "when": "panelVisible && panelPosition == 'bottom'"
  },

  /**
   ** Kill the active terminal with `cmd+w` and all terminals with `cmd+k cmd+w` (no default bindings).
   */

  {
    "key": "cmd+w",
    "command": "workbench.action.terminal.kill",
    "when": "terminalFocus"
  },

  {
    "key": "cmd+k cmd+w",
    "command": "workbench.action.terminal.killAll",
    "when": "terminalFocus"
  },

  /**
   ** Miscellaneous `cmd+g` bindings (most of them have no default bindings).
   */

  {
    "describe": "Toggle Activity Bar Visibility",
    "key": "cmd+g a",
    "command": "workbench.action.toggleActivityBarVisibility"
  },

  {
    "describe": "Toggle Primary Side Bar Position",
    "key": "cmd+g b",
    "command": "workbench.action.toggleSidebarPosition"
  },

  {
    "describe": "Delete Current File",
    "key": "cmd+g d",
    "command": "fileutils.removeFile"
  },

  {
    "describe": "Collapse Folders in Explorer",
    "key": "cmd+g e",
    "command": "workbench.files.action.collapseExplorerFolders"
  },

  {
    "describe": "Toggle Maximized Panel",
    "key": "cmd+g j",
    "command": "workbench.action.toggleMaximizedPanel"
  },

  // {
  //   "describe": "Toggle Inlay Hints",
  //   "key": "cmd+g h",
  //   "command": "settings.cycle.inlayHints"
  // },

  {
    "describe": "Inspect Editor Tokens and Scopes",
    "key": "cmd+g i",
    "command": "editor.action.inspectTMScopes"
  },

  {
    "describe": "Toggle Minimap",
    "key": "cmd+g m",
    "command": "editor.action.toggleMinimap"
  },

  {
    "describe": "Rename Current File",
    "key": "cmd+g r",
    "command": "fileutils.renameFile"
  },

  {
    "describe": "Configure User Snippets",
    "key": "cmd+g s",
    "command": "workbench.action.openSnippets"
  },

  {
    "describe": "Create New Terminal in Editor Area",
    "key": "cmd+g t",
    "command": "workbench.action.createTerminalEditor"
  },

  {
    "describe": "Toggle Centered Layout",
    "key": "cmd+g z",
    "command": "workbench.action.toggleCenteredLayout"
  },

  {
    "describe": "Open Default Settings (JSON)",
    "key": "cmd+g ,",
    "command": "workbench.action.openRawDefaultSettings"
  },

  {
    "describe": "Open Workspace Settings (JSON)",
    "key": "cmd+g cmd+,",
    "command": "workbench.action.openWorkspaceSettingsFile"
  },

  {
    "describe": "Open Keyboard Shortcuts (JSON)",
    "key": "cmd+g cmd+s",
    "command": "workbench.action.openGlobalKeybindingsFile"
  },

  /**
   ** Disable Emoji Sense Extension `cmd+i` keybinding. Use `ctrl+cmd+i` instead.
   */

  {
    "key": "cmd+i",
    "command": "-emojisense.quickEmoji",
    "when": "editorTextFocus"
  },

  {
    "key": "cmd+i",
    "command": "-emojisense.quickEmojiTerminal",
    "when": "terminalFocus"
  },

  {
    "key": "ctrl+cmd+i",
    "command": "emojisense.quickEmoji",
    "when": "editorTextFocus"
  },

  {
    "key": "ctrl+cmd+i",
    "command": "emojisense.quickEmojiTerminal",
    "when": "terminalFocus"
  }

  /**
   ** Bindings that force you to use vim commands and bindings.
   */

  /**
   ** Disable `cmd+w` to close windows. Learn vim's `:q` and `ctrl-w` + c.
   */

  // {
  //   "key": "cmd+w",
  //   "command": "-workbench.action.closeActiveEditor"
  // },

  // {
  //   "key": "cmd+w",
  //   "command": "-workbench.action.closeWindow",
  //   "when": "!editorIsOpen && !multipleEditorGroups"
  // },

  // {
  //   "key": "cmd+w",
  //   "command": "-workbench.action.closeGroup",
  //   "when": "activeEditorGroupEmpty && multipleEditorGroups"
  // },

  /**
   ** Disable `cmd+\` to split windows. Learn vim's `:vs` and `:sp` and `ctrl+w` + v/s.
   */

  //{
  //  "key": "cmd+\\",
  //  "command": "-workbench.action.splitEditor"
  //},

  //{
  //  "key": "cmd+k cmd+\\",
  //  "command": "-workbench.action.splitEditorOrthogonal"
  //}

  /**
   ** Disable `cmd+s` to save file. Learn vim's `:w`.
   */

  // {
  //   "key": "cmd+s",
  //   "command": "-workbench.action.files.save"
  // }
]

{
  /*
    ðŸ¦‰ NOTES:
   "description" and "prefix" values are used to select/find a snippet inside
   'Insert Snippet' and 'Surround with Snippet' commands.
  */

  /**
   ** Miscellaneous.
   */

  "Event Prevent Default": {
    "description": "Event Prevent Default",
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["epd"],
    "body": ["event.preventDefault();"]
  },

  "Document Query Selector": {
    "description": "Document Query Selector",
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["qs"],
    "body": ["document.querySelector('$1')"]
  },

  "JSON Stringify": {
    "description": "JSON Stringify",
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["js"],
    "body": ["JSON.stringify($1, null, 2)"]
  },

  "Export Default": {
    "description": "Export Default",
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["ed"],
    "body": ["export default ${TM_SELECTED_TEXT:${1}}"]
  },

  /**
   ** Console.
   */

  // This snippet is the same as built in one, but without a semicolon.
  "Console Log": {
    "description": "Console Log",
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["log"],
    "body": ["console.log($1)"]
  },

  // This snippet is the same as in `JavaScript (ES6) code snippets` but without a semicolon.
  "Console Log Object": {
    "description": "Console Log Object",
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["clo"],
    "body": ["console.log('${1:object} :>> ', ${1:object})"]
  },

  "?": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["lg"], // just ? doesn't work.
    "body": ["console.log(\"${1}?\", ${1})"]
  },

  "??": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["lgo"],
    "body": ["console.log({ \"${1}?\": ${1} })"]
  },

  /**
   ** JavaScript Functions.
   */

  "Function": {
    "description": "Function",
    "scope": "javascript,javascriptreact",
    "prefix": ["fn"],
    "body": ["function ${1:name}(${2:params}) {", "\t${TM_SELECTED_TEXT:${3}}", "}"]
  },

  "Async Function": {
    "description": "Async Function",
    "scope": "javascript,javascriptreact",
    "prefix": ["afn"],
    "body": ["async function ${1:name}(${2:params}) {", "\t${TM_SELECTED_TEXT:${3}}", "}"]
  },

  "Export Function": {
    "description": "Export Function",
    "scope": "javascript,javascriptreact",
    "prefix": ["efn"],
    "body": [
      "export function ${1:name}(${2:params}) {",
      "\t${TM_SELECTED_TEXT:${3}}",
      "}"
    ]
  },

  "Export Async Function": {
    "description": "Export Async Function",
    "scope": "javascript,javascriptreact",
    "prefix": ["eafn"],
    "body": [
      "export async function ${1:name}(${2:params}) {",
      "\t${TM_SELECTED_TEXT:${3}}",
      "}"
    ]
  },

  /**
   ** TypeScript Functions.
   */

  "TypeScript Function": {
    "description": "TypeScript Function",
    "scope": "typescript,typescriptreact",
    "prefix": ["fn"],
    "body": ["function ${1:name}(${2:params})${3} {", "\t${TM_SELECTED_TEXT:${4}}", "}"]
  },

  "TypeScript Async Function": {
    "description": "TypeScript Async Function",
    "scope": "typescript,typescriptreact",
    "prefix": ["afn", "asfn"],
    "body": [
      "async function ${1:name}(${2:params}: ${3:type}) {",
      "\t${TM_SELECTED_TEXT:${4}}",
      "}"
    ]
  },

  "TypeScript Export Function": {
    "description": "TypeScript Export Function",
    "scope": "typescript,typescriptreact",
    "prefix": ["efn"],
    "body": [
      "export function ${1:name}(${2:params}: ${3:type}) {",
      "\t${TM_SELECTED_TEXT:${4}}",
      "}"
    ]
  },

  "TypeScript Export Async Function": {
    "description": "TypeScript Export Async Function",
    "scope": "typescript,typescriptreact",
    "prefix": ["eafn", "easfn"],
    "body": [
      "export async function ${1:name}(${2:params}: ${3:type}) {",
      "\t${TM_SELECTED_TEXT:${4}}",
      "}"
    ]
  },

  /**
   ** TypeScript.
   */

  "Interface": {
    "description": "Interface",
    "scope": "typescript,typescriptreact",
    "prefix": ["in"],
    "body": ["interface $1 {", "\t$2", "}"]
  },

  "Export Interface": {
    "description": "Export Interface",
    "scope": "typescript,typescriptreact",
    "prefix": ["ein"],
    "body": ["export interface $1 {", "\t$2", "}"]
  },

  "Export Type": {
    "description": "Export Type",
    "scope": "typescript,typescriptreact",
    "prefix": ["et"],
    "body": ["export type $1"]
  },

  /**
   ** ts prune.
   */
  "Ts Prune Ignore Next" : {
    "description": "Ts Prune Ignore Next",
    "prefix": ["tpin"],
    "scope": "typescript,typescriptreact",
    "body": ["// ts-prune-ignore-next"]
  },

  /**
   ** Prettier.
   */

  "Prettier Ignore": {
    "description": "Prettier Ignore",
    "scope": "javascript,typescript,javascriptreact,typescriptreact,jsonc,markdown",
    "prefix": ["pig"],
    // $LINE_COMMENT doesn't work inside jsx.
    "body": ["$BLOCK_COMMENT_START prettier-ignore $BLOCK_COMMENT_END"]
  },

  /**
   ** Eslint.
   */

  "Eslint Disable Line": {
    "description": "Eslint Disable Line",
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["edl"],
    "body": ["$LINE_COMMENT eslint-disable-line $1"]
  },

  "Eslint Disable Next Line": {
    "description": "Eslint Disable Next Line",
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["ednl"],
    "body": ["$LINE_COMMENT eslint-disable-next-line $1"]
  },

  /**
   ** React.
   */

  "React Forward Ref": {
    "description": "React Forward Ref",
    "scope": "typescript,typescriptreact",
    "prefix": ["rfr"],
    "body": [
      "const ${1} = React.forwardRef<${2:HTMLDivElement}>((props, forwardedRef) => {",
      "\treturn <${3:div} {...props} ref={forwardedRef} />",
      "})",
      "",
      "${1}.displayName = '${1}'"
    ]
  },

  /**
   ** React Hooks.
   */

  "React useCallback": {
    "description": "React useCallback",
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "uc",
    "body": ["const $1 = React.useCallback(($2) => {", "\t$3", "}, [$4])"]
  },

  "React useEffect": {
    "description": "React useEffect",
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["ue"],
    "body": ["React.useEffect(() => {", "\t$1", "}, [$2])"]
  },

  "React useMemo": {
    "description": "React useMemo",
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["um"],
    "body": ["const $1 = React.useMemo(() => {", "\treturn $2", "}, [$3])"]
  },

  "TypeScript React useRef": {
    "description": "React useRef",
    "scope": "typescript,typescriptreact",
    "prefix": ["ur"],
    "body": ["const $1Ref = React.useRef${3}(${4:null})"]
  },

  "React useState": {
    "description": "React useState",
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["us"],
    "body": ["const [$1, set${1/(.*)/${1:/capitalize}/}] = React.useState($2)"]
  },

  /**
   ** React Testing Library.
   */

  "Screen Debug": {
    "description": "Screen Debug",
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["sd"],
    "body": ["screen.debug($1)"]
  },

  "Screen Get By Role": {
    "description": "Screen Get By Role",
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["sbr"],
    "body": ["screen.getByRole('$1')"]
  },

  "Screen Get All By Role": {
    "description": "Screen Get All By Role",
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["sabr"],
    "body": ["screen.getAllByRole('$1')"]
  },

  "Screen Get By Text": {
    "description": "Screen Get By Text",
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["sbt"],
    "body": ["screen.getByText('$1')"]
  },

  "Screen Get By Label Text": {
    "description": "Screen Get By Label Text",
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["sblt"],
    "body": ["screen.getByLabelText('$1')"]
  },

  "act": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["act"],
    "body": ["act(() => {", "\t${TM_SELECTED_TEXT:${1}}", "})"]
  },

  "await act": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["aact"],
    "body": ["await act(async () => {", "\t${TM_SELECTED_TEXT:${1}}", "})"]
  },

  /**
   ** Jest.
   */

  "Jest Before Each": {
    "description": "Jest Before Each",
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["bef"],
    "body": ["beforeEach(() => {", "\t${TM_SELECTED_TEXT:${1}}", "})"]
  },

  /**
   ** Remix.
   */

  "Remix Meta": {
    "description": "Remix Meta Function",
    "scope": "typescript,typescriptreact",
    "prefix": ["rmeta"],
    "body": ["export const meta: MetaFunction = () => {", "\treturn { title: $1 }", "}"]
  },

  "Remix Links": {
    "description": "Remix Links Function",
    "scope": "typescript,typescriptreact",
    "prefix": ["rlink"],
    "body": [
      "export const links: LinksFunction = () => {",
      "\treturn [{ rel: 'stylesheet', href: $1 }]",
      "}"
    ]
  },

  "Remix Loader": {
    "description": "Remix Loader Function",
    "scope": "typescript,typescriptreact",
    "prefix": ["rload"],
    "body": [
      "export const loader: LoaderFunction = async ({ request, params }) => {",
      "\t${TM_SELECTED_TEXT:${1}}",
      "}"
    ]
  },

  "Remix Action": {
    "description": "Remix Action Function",
    "scope": "typescript,typescriptreact",
    "prefix": ["ract"],
    "body": [
      "export const action: ActionFunction = async ({ request }) => {",
      "\t${TM_SELECTED_TEXT:${1}}",
      "}"
    ]
  }
}
